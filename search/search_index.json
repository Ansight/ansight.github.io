{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Use Ansight to easily record an Android device's behaviour for replay and analysis.</p> <p>Connect a developer-enabled Android device to your computer and Ansight streams the device logs, a screen mirroring and application performance data.</p> <p></p> <p>Ansight works with all of your existing Android apps:</p> <ul> <li>Zero Configuration: You do not need to add any SDK's to your codebase for Ansight to capture data.</li> <li>App Free: No 3rd party apps need to be installed onto the phone or tablet.</li> <li>Target Any App: Ansight can target any kind of app: an app being debugged, an app from the Play Store, or even an app bundled with the phone. If the app is on the device, Ansight can monitor it.</li> <li>Toolchain Agnostic: Ansight works with all Android development frameworks. It uses the standard ADB toolchain so it doesn't matter if you use Java, Kotlin, React Native, Flutter, Xamarin, Unity, Unreal Engine etc.</li> <li>Standalone: Ansight is fully self contained and does not require any developer tools like Android Studio to be installed.</li> </ul>"},{"location":"#installing-ansight","title":"Installing Ansight","text":"<p>macOS Only</p> <p>Ansight is currently only available for macOS. If you would like Ansight to become available on Windows, please reach out to Matthew via <code>matthew@mfractor.com</code> to discuss.</p> <ol> <li>Download the latest Ansight.Studio.Mac package.</li> <li>Locate the package in your downloads.</li> <li>Right click on the package and select <code>Open</code>.   a. You may receive a warning that Ansight is from an unknown developer. Please continue to run the installer.</li> <li>Run the installer.</li> <li>Open your Applications folder and double click on <code>Ansight.Studio.Mac</code> to launch Ansight.</li> </ol>"},{"location":"#using-ansight","title":"Using Ansight","text":""},{"location":"#watching-a-device","title":"Watching A Device","text":"<p>To use Ansight, plug an Android device into your computer that has developer mode enabled.</p> <p>Once a device is connected, Ansight will automatically start watching the device.</p> <p>This includes:</p> <ol> <li>A mirroring of the devices screen.</li> <li>The devices logs.</li> <li>Optionally, the amount of memory a targeted app is using.</li> </ol> <p>If you have multiple devices connected, Ansight will choose the first device it sees. You can change device by clicking on the devices name in the top left of the window and then choosing</p>"},{"location":"#inspecting-device-logs","title":"Inspecting Device Logs","text":"<p>After you have connected a device, you can use the log viewer to observe the runtime logs of the device. Ansight uses <code>adb logcat</code> to stream the logs from the device.</p> <p>The log viewer shows the following details:</p> <ul> <li>Level: The level of the logged item (Verbose, Debug, Info, Warning, Error, Fatal). See android.util.Log.</li> <li>Time: The date and time that the log message was written. For replayed recordings, this shows the time elapsed since the beginning of the recording</li> <li>Process: The ID of the process that wrote this log message.</li> <li>Tag: The tag associated with the log message.</li> <li>Message: The message content of the log entry.</li> <li>Thread: The ID of the thread that wrote this log message.</li> </ul> <p>The log viewer also contains several methods of filtering the content:</p> <ul> <li>Log Level: Select the minimum log level to display in the logs.</li> <li>Process ID: A comma or space separated list of process ids to watch.</li> <li>Tag: A comma or space separated list of tags for each log message to watch.</li> <li>Content: A partial string to match inside the logs message.</li> </ul>"},{"location":"#inspecting-device-properties","title":"Inspecting Device Properties","text":""},{"location":"#targeting-an-app","title":"Targeting An App","text":"<p>Ansight can target a specific application to monitor and will display the memory usage of that app while it is running.</p> <p>To target an app, click on the area <code>No Package Targeted</code> below the targeted device.</p> <p>This opens the app explorer, you can search by package ID and view details for each installed app on the device.</p> <p>Once you have chosen an application, Ansight will show you the package identifier targeted in the top left</p>"},{"location":"#recording-sessions","title":"Recording Sessions","text":"<p>Ansight can record a device session for</p>"},{"location":"#saving-your-recording","title":"Saving Your Recording","text":""},{"location":"#what-does-ansight-record","title":"What does Ansight record?","text":"<p>Ansight records \"high-fidelity\" data for the testing session. This includes:</p> <ul> <li>The devices properties via the <code>adb shell getprop</code> command. This includes API level, model, manufacturer, etc.</li> <li>A screen recording.</li> <li>The device logs.</li> <li>If an app is targeted, the bundle identifier and the process IDs of that app.</li> </ul>"},{"location":"#replaying-sessions","title":"Replaying Sessions","text":""},{"location":"#reloading-previous-recordings","title":"Reloading Previous Recordings","text":""},{"location":"#importing-an-ansight-recording","title":"Importing An Ansight Recording","text":"<p>Ansight can import and replay any <code>.ans</code></p> <p>To load an Ansight recording from file:</p>"},{"location":"#viewing-session-properties","title":"Viewing Session Properties","text":""},{"location":"#help-and-support","title":"Help and Support","text":"<p>For assistance using Ansight, you can reach out to me, Matthew Robbins, Ansights author, through the following channels:</p> <ul> <li>Twitter: @matthewrdev</li> <li>Email: matthew@mfractor.com</li> </ul>"},{"location":"#feedback","title":"Feedback","text":"<p>If you'd like to see a feature added to Ansight or have found a bug, please create an issue in Ansight issue tracker:</p> <p>https://github.com/Ansight/ansight.feedback/issues</p>"},{"location":"#releases-and-updates","title":"Releases And Updates","text":"<p>New releases can be downloaded at the Ansight GitHub Releases page.</p>"},{"location":"#how-does-ansight-help-software-testing","title":"How Does Ansight Help Software Testing?","text":"<p>Let's consider the following scenario:</p> <ol> <li>Joe is testing the App and finds a bug.</li> <li>Joe creates a bug report for Jane, the developer.</li> <li>Jane reads the bug report and, more often than not, needs more information:<ul> <li>A screen recording might help demonstrate what went wrong.</li> <li>A snapshot of the device logs could shed light on the apps behaviour during the bug.</li> <li>Joe may have missed including the device model or Android version or App version or web server used.</li> </ul> </li> <li>Jane asks Joe to capture this missing information to help her solve the issue.</li> <li>Repeats steps 3 and 4.</li> </ol> <p>I wanted a tool Joe could use to seamlessly capture all the information that Jane needs to diagnose a bug.</p> <ul> <li>Joe's life is easier as he can focus on testing and let a tool capture the required data.</li> <li>Jane can focus on collaborating with Joe to understand the bug, rather than probing Joe for more information.</li> </ul> <p>To learn more about why Ansight was built and the problem it solves, read about Ansights origins here.</p>"},{"location":"ansights-origins/","title":"Ansights Origins","text":"<p>How Ansight came to be</p>"},{"location":"ansights-origins/#ansights-origins","title":"Ansights Origins","text":"<p>In early 2021 I worked for a Brisbane-based company building an Android app for mining services; a dynamic form engine that workers used to capture data for various tasks throughout their shifts.</p> <p>Miners used this app their entire shift, often for 8-12 hours, without restarting and rarely with any internet connection. While there was an extensive testing and quality assurance process, bugs inevitably surfaced during these long sessions.</p> <p>To reproduce issues found in the field, testers needed to simulate a miners long running session. This involved running the app for 2+ hours, and when a bug occurred, capturing a screen recording and device logs.</p> <p>We found we could capture each of these data sources separately with tools like <code>adb</code>, Application Insights or Vysor (screen mirroring), but they each only represented part of the picture and could only be viewed/replayed in isolation.</p> <p>We needed a tool that could:</p> <ul> <li>Record multiple diagnostic data sources concurrently.</li> <li>Capture all device and app details transparently.</li> <li>Replay each data source side-by-side for easy analysis.</li> <li>Be dead simple to use: Plug phone in, click record and then replay and share.</li> </ul>"},{"location":"ansights-origins/#the-problem-landscape","title":"The Problem Landscape","text":""},{"location":"ansights-origins/#traditional-application-metrics-are-low-fidelity","title":"Traditional Application Metrics Are Low Fidelity","text":"<p>While we used tools like Application Insights to capture sessions, the information generated had some shortcomings:</p> <ul> <li>We needed to search and find the offending session in the web portal. This would take time to do and/or the online tool would need to process the logs before the session became available.</li> <li>Application Insights doesn't capture the \"full picture\" of the session in the context of the operating system. Data such as  the full device logs and an apps memory usage or rendering pressure helps immensely to identify how the app is actually performing.</li> <li>Typically online tools like Application Insights don't capture a screen recording. While other tools like UXCam do this, we would still need to wait for the video to upload to the server, find it and then replay it.</li> </ul> <p>We needed a way to capture \"high-fidelity\" session data (logs, a screen recording, application performance) and then easily share and replay this data within the team.</p>"},{"location":"ansights-origins/#capturing-high-fidelity-data-requires-technical-training-and-knowledge","title":"Capturing High Fidelity Data Requires Technical Training And Knowledge","text":"<p>One of the best methods to diagnose long-running issues was through the device's logs; this included the logs for our app and the operating system. We could capture these using the <code>adb logcat</code> tool.</p> <p>Software testers needed to learn to use <code>adb logcat</code> to capture logs. There was many parts to learning this tool:</p> <ol> <li>They needed to learn how to use Terminal or Command Line.</li> <li>They needed to learn the necessary ADB commands, how to run them and how to direct the output to a file.</li> <li>Each time they did a testing session, they'd need to remember 1+2</li> </ol> <p>Another option was teaching</p> <p>While the adb logs were very useful for diagnosing issues, To record the ADB logs</p> <p>Needed a tool where:</p> <ul> <li>Testers could simply plug phone in and immediately start testing.</li> <li>Logs, a screen capture, device/app details and application performance</li> </ul> <p>I wanted an easy-to-use tool where non-developers could plug a phone into the computer and immediately see/capture device logs.</p>"},{"location":"ansights-origins/#log-analysis-is-painful","title":"Log Analysis Is Painful","text":"<p>When an <code>adb logcat</code> was captured for a bug, a new problem arose: analysing large log file is painful!</p> <p>These log files would often be in the 10's of thousands of lines</p> <ul> <li>Sifting through 2+ hour logs is tedious. I needed a tool to help me quickly filter large log files.</li> </ul>"},{"location":"ansights-origins/#communication-paper-cuts","title":"Communication Paper Cuts","text":"<ul> <li>When testers found an issue, they needed to reproduce it while recording the screen, the logs and then capture the device and app details (API level, app version, web URLs). Often this invol I wanted a tool to automatically capture all of this information without</li> </ul>"},{"location":"ansights-origins/#_1","title":"Ansights Origins","text":"<p>I created Ansight to easily record, replay and analyse multiple data sources from an Android device in a single tool.</p>"},{"location":"enable-developer-mode/","title":"Enabling Developer Mode","text":"<p>Enable Developer Mode on your Android device to allow Ansight features.</p> <p>For Ansight to be able to capture an Android device logs from <code>logcat</code> and record the screen, it is required to enable developer mode on your target device.</p> <p>Important</p> <p>The device used to illustrate this procedure is an Samsung Galaxy J5 Pro, which employs custom interface and Settings screen, but the general procedure is mostly the same for any Android device. If you're having issues finding the screens about check for a vendor specific procedure on your brands support site.</p> <p>Warning</p> <p>When you enable Developer Mode on your Android device, several advanced features of the operating system are enabled, such as side-loading of apps. This may allow your device for installation of unwanted apps, so its important to be warned if you're using a personal device. The recommendation is always to use a device specific for testing or disable developer mode when Ansight (or other development features) is not in use.</p> <p>The procedure to enable Developer Mode is:</p> <ul> <li>Open the Settings app on your device and lookup for the About your Phone option.</li> </ul> <p></p> <ul> <li>Depending on your iPhone, what we're looking for may be on the Software Information page, or this section may be merged into this about page. Select the option if it have one.</li> </ul> <p></p> <p></p> <ul> <li>Look up for the <code>About</code> option</li> <li>Under the About Screen search for the <code>Build Number</code></li> <li>Tap 7 times on the Build Number option, you should receive a message such as <code>You are now a developer</code></li> </ul> <p>After following those steps the Developer Options menu item should appear on the Settings page. An additional step is to enable the USB Debugging option. This is what allows you computer to connect to a device and collect information that will feed Ansight session data. To allow this option you should:</p> <ul> <li>Open the <code>Developer Options</code> option on the <code>Settings</code> screen</li> <li>Look up for the <code>Debugging</code> section</li> <li>Find the <code>USB debugging</code> option and enable the Switch</li> </ul> <p></p> <p>After enabling the USB debugging you should connect the device that you want to record sessions on Ansight. A dialog should be presented asking you to Allow USB debugging.</p> <p></p> <p>You're all set to start using Ansight.</p>"},{"location":"legal/data-collection-and-user-tracking/","title":"Data Collection And User Tracking","text":"<p>Attribution to the third party software and libraries used by Ansight</p>"},{"location":"legal/data-collection-and-user-tracking/#introduction","title":"Introduction","text":"<p>This document lists the third party software and libraries used by Ansight.</p>"},{"location":"legal/data-collection-and-user-tracking/#third-party-attribution","title":"Third Party Attribution","text":"<p>Under Construction</p> <ul> <li>Xamarin.Forms</li> <li>SkiaSharp</li> <li>OpenCVSharp</li> <li>Scrcpy</li> </ul>"},{"location":"legal/end-user-license/","title":"End User License","text":""},{"location":"legal/end-user-license/#introduction","title":"Introduction","text":""},{"location":"legal/third-party-software/","title":"Third Party Software","text":"<p>Attribution to the third party software and libraries used by Ansight</p>"},{"location":"legal/third-party-software/#introduction","title":"Introduction","text":"<p>This document lists the third party software and libraries used by Ansight.</p>"},{"location":"legal/third-party-software/#third-party-attribution","title":"Third Party Attribution","text":"<p>Under Construction</p> <ul> <li>Xamarin.Forms</li> <li>SkiaSharp</li> <li>OpenCVSharp</li> <li>Scrcpy</li> </ul>"}]}